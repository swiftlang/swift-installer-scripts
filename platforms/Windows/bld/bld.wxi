<?xml version="1.0" encoding="utf-8"?>
<Include xmlns="http://wixtoolset.org/schemas/v4/wxs">

  <Package
      Language="1033"
      Manufacturer="!(loc.ManufacturerName)"
      Name="$(VariantProductName)"
      UpgradeCode="$(VariantUpgradeCode)"
      Version="$(NonSemVerProductVersion)"
      Scope="$(PackageScope)">

    <Media Id="1" Cabinet="$(VariantCabName)" EmbedCab="$(ArePackageCabsEmbedded)" />

    <WixVariable Id="SideBySidePackageUpgradeCode" Value="$(VariantUpgradeCode)" />
    <FeatureGroupRef Id="SideBySideUpgradeStrategy" />

    <DirectoryRef Id="_usr_include$(VariantSuffix)">
      <Directory Id="_usr_include_llvm_c$(VariantSuffix)" Name="llvm-c" />
      <Directory Id="_usr_include_swift$(VariantSuffix)" Name="swift" />
    </DirectoryRef>

    <DirectoryRef Id="_usr_lib_swift$(VariantSuffix)">
      <Directory Id="_usr_lib_swift_migrator$(VariantSuffix)" Name="migrator" />
      <Directory Id="_usr_lib_swift_swiftToCxx$(VariantSuffix)" Name="swiftToCxx" />
    </DirectoryRef>

    <DirectoryRef Id="_usr_share$(VariantSuffix)">
      <Directory Id="_usr_share_clang$(VariantSuffix)" Name="clang" />
      <Directory Id="_usr_share_swift$(VariantSuffix)" Name="swift" />
      <Directory Id="_usr_share_doc$(VariantSuffix)" Name="doc">
        <Directory Id="_usr_share_doc_swift$(VariantSuffix)" Name="swift">
          <Directory Id="_usr_share_doc_swift_diagnostics$(VariantSuffix)" Name="diagnostics">
          </Directory>
        </Directory>
      </Directory>
    </DirectoryRef>

    <ComponentGroup Id="cmark_gfm" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin/cmark-gfm.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin/cmark-gfm-extensions.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="binutils" Directory="_usr_bin$(VariantSuffix)">
      <!-- TODO(compnerd) can we use symbolic links to llvm-ar.exe instead? -->
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-dlltool.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-lib.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-ranlib.exe" />
      </Component>
      <!-- TODO(compnerd) can we use symbolic links to llvm-objdump.exe instead? -->
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-readelf.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-strip.exe" />
      </Component>
      <!--
        TODO(compnerd) we should symlink:
          - addr2line.exe
          - ar.exe
          - c++filt.exe
          - dwp.exe
          - nm.exe
          - objcopy.exe
          - objdump.exe
          - ranlib.exe
          - readelf.exe
          - size.exe
          - strings.exe
      -->

      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\dsymutil.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-ar.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-cov.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-cvtres.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-cxxfilt.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-dwarfdump.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-dwp.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-lipo.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-ml.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-mt.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-nm.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-objcopy.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-objdump.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-pdbutil.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-profdata.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-rc.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-readobj.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-size.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-strings.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-symbolizer.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\llvm-undname.exe" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="lto">
      <Component Directory="_usr_bin$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\bin\LTO.dll" />
      </Component>

      <Component Directory="_usr_lib$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\lib\LTO.lib" />
      </Component>

      <Component Directory="_usr_include_llvm_c$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\include\llvm-c\lto.h" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="ClangFeatures" Directory="_usr_share_clang$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\clang\features.json" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="clang" Directory="_usr_bin$(VariantSuffix)">
      <ComponentGroupRef Id="ClangFeatures" />

      <!-- TODO(compnerd) can we use symbolic links to clang.exe instead? -->
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang-cl.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang-cpp.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang++.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang-scan-deps.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\clang-deps-launcher.py" />
      </Component>
      <!--
        TODO(compnerd) we should include:
        - clang-offload-bundler
        - optremarks.dll
        - scan-build
        - scan-view
      -->
    </ComponentGroup>

    <ComponentGroup Id="lld" Directory="_usr_bin$(VariantSuffix)">
      <!-- TODO(compnerd) can we use symbolic links to lld.exe instead? -->
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\ld.lld.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\ld64.lld.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\lld-link.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\wasm-ld.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\lld.exe" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="BlocksRuntime">
      <Component Directory="_usr_bin$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\bin\BlocksRuntime.dll" />
      </Component>

      <Component Directory="_usr_lib$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\lib\BlocksRuntime.lib" />
      </Component>

      <!-- TODO(compnerd) should we install the block headers? -->
    </ComponentGroup>

    <ComponentGroup Id="libdispatch">
      <Component Directory="_usr_bin$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\bin\dispatch.dll" />
      </Component>

      <Component Directory="_usr_lib$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\lib\dispatch.lib" />
      </Component>

      <!-- TODO(compnerd) should we install the dispatch headers? -->
    </ComponentGroup>

    <ComponentGroup Id="SwiftCxx" Directory="_usr_lib_swift_swiftToCxx$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\swiftToCxx\_SwiftCxxInteroperability.h" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\swiftToCxx\_SwiftStdlibCxxOverlay.h" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\swiftToCxx\experimental-interoperability-version.json" />
      </Component>

      <Component Directory="_usr_include_swift$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\include\swift\bridging.modulemap" />
      </Component>
      <Component Directory="_usr_include_swift$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\include\swift\bridging" />
      </Component>
      <Component Directory="_usr_include_swift$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\include\module.modulemap" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="SwiftDemangle">
      <Component Directory="_usr_bin$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\bin\swiftDemangle.dll" />
      </Component>
      <Component Directory="_usr_lib$(VariantSuffix)">
        <File Source="$(ToolchainVariantRoot)\usr\lib\swiftDemangle.lib" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="SwiftEducationalNotes" Directory="_usr_share_doc_swift_diagnostics$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\dynamic-callable-requirements.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\error-in-future-swift-version.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\existential-member-access-limitations.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\multiple-inheritance.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\nominal-types.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\opaque-type-inference.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\property-wrapper-requirements.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\protocol-type-non-conformance.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\result-builder-methods.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\string-interpolation-conformance.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\temporary-pointers.md" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\doc\swift\diagnostics\trailing-closure-matching.md" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="SwiftFeatures" Directory="_usr_share_swift$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\share\swift\features.json" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="SwiftMigrator" Directory="_usr_lib_swift_migrator$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\ios4.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\ios42.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\macos4.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\macos42.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\overlay4.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\overlay42.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\tvos4.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\tvos42.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\watchos4.json" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\lib\swift\migrator\watchos42.json" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="swift" Directory="_usr_bin$(VariantSuffix)">
      <ComponentGroupRef Id="SwiftCxx" />
      <ComponentGroupRef Id="SwiftDemangle" />
      <ComponentGroupRef Id="SwiftEducationalNotes" />
      <ComponentGroupRef Id="SwiftFeatures" />
      <ComponentGroupRef Id="SwiftMigrator" />

      <!-- TODO(compnerd) can we use symbolic links to swift-frontend.exe instead? -->
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-api-digester.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-autolink-extract.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-symbolgraph-extract.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-demangle.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-frontend.exe" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="SwiftMacros" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\ObservationMacros.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftMacros.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="FoundationMacros" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\FoundationMacros.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="TestingMacros" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\TestingMacros.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="argument_parser" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\ArgumentParser.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="tools_support_core" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\TSCBasic.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\TSCUtility.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="swift_driver" Directory="_usr_bin$(VariantSuffix)">
      <!-- TODO(compnerd) can we use symbolic links to swift.exe instead? -->
      <Component>
        <File Name="swiftc.exe" Source="$(ToolchainRoot)\usr\bin\swift-driver.exe" />
      </Component>

      <Component>
        <File Name="swift.exe" Source="$(ToolchainRoot)\usr\bin\swift-driver.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\swift-help.exe" />
      </Component>

      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\SwiftOptions.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\SwiftDriver.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\SwiftDriverExecution.dll" />
      </Component>
    </ComponentGroup>

   <ComponentGroup Id="compiler_swift_syntax" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftBasicFormat.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftCompilerPluginMessageHandling.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftDiagnostics.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftIDEUtils.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftIfConfig.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftLexicalLookup.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftOperators.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftParser.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftParserDiagnostics.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftSyntax.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftSyntaxBuilder.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftSyntaxMacroExpansion.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\_CompilerSwiftSyntaxMacros.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="swift_syntax" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftBasicFormat.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftCompilerPluginMessageHandling.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftDiagnostics.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftIDEUtils.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftLibraryPluginProvider.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftOperators.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftParser.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftParserDiagnostics.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftRefactor.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftSyntax.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftSyntaxBuilder.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftSyntaxMacroExpansion.dll" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftSyntaxMacros.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="plugin_server" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\swift-plugin-server.exe" />
      </Component>
      <Component>
        <File Source="$(ToolchainVariantRoot)\usr\bin\SwiftInProcPluginServer.dll" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="mimalloc" Directory="_usr_bin$(VariantSuffix)">
      <Component>
        <File Source="$(ToolchainRoot)\usr\bin\mimalloc.dll" />
      </Component>
      <Component>
        <?if $(ProductArchitecture) = "amd64" ?>
          <File Source="$(ToolchainRoot)\usr\bin\mimalloc-redirect.dll" />
        <?elseif $(ProductArchitecture) = "arm64" ?>
          <File Source="$(ToolchainRoot)\usr\bin\mimalloc-redirect-arm64.dll" />
        <?endif?>
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="Configuration">
      <Component Directory="ToolchainsVersioned$(VariantSuffix)">
        <File Source="$(ToolchainRoot)\ToolchainInfo.plist" />
      </Component>
    </ComponentGroup>

    <ComponentGroup Id="EnvironmentVariables">
      <Component Id="UserPathVariable" Condition="NOT ALLUSERS=1" Directory="_usr_bin$(VariantSuffix)" Guid="ab52b870-23ee-42e8-9581-3fcbdfb9228c">
        <Environment Action="set" Name="Path" Part="last" Permanent="no" System="no" Value="[_usr_bin]" />
      </Component>
    </ComponentGroup>

    <Feature Id="BuildTools" AllowAbsent="no" Title="$(VariantProductName)">
      <ComponentGroupRef Id="cmark_gfm" />

      <ComponentGroupRef Id="binutils" />
      <ComponentGroupRef Id="lto" />
      <ComponentGroupRef Id="clang" />
      <ComponentGroupRef Id="lld" />
      <ComponentGroupRef Id="BlocksRuntime" />
      <ComponentGroupRef Id="libdispatch" />
      <ComponentGroupRef Id="swift" />
      <ComponentGroupRef Id="argument_parser" />
      <ComponentGroupRef Id="tools_support_core" />
      <ComponentGroupRef Id="swift_driver" />
      <ComponentGroupRef Id="compiler_swift_syntax" />
      <ComponentGroupRef Id="swift_syntax" />
      <ComponentGroupRef Id="plugin_server" />
      <ComponentGroupRef Id="SwiftMacros" />
      <ComponentGroupRef Id="FoundationMacros" />
      <ComponentGroupRef Id="TestingMacros" />
      <ComponentGroupRef Id="mimalloc" />

      <ComponentGroupRef Id="ClangResources$(VariantSuffix)" />
      <ComponentGroupRef Id="SwiftClangResources$(VariantSuffix)" />

      <ComponentGroupRef Id="Configuration" />
      <ComponentGroupRef Id="EnvironmentVariables" />
      <ComponentGroupRef Id="VersionedDirectoryCleanup" />
    </Feature>
  </Package>
</Include>
